{
    "version": 1,
    "tags": [
        {
            "name": "xtal-fetch-get",
            "description": "A small, basic vanilla web component wrapper around the fetch api.",
            "selfResolvingModulePath": "https://unpkg.com/xtal-fetch@0.0.70/xtal-fetch-get.js?module",
            "testCaseNames": [
                "test1"
            ],
            "attributes": [
                {
                    "name": "fetch",
                    "description": "Boolean property / attribute -- must be true to enable (or pre-validate) fetch requests."
                },
                {
                    "name": "href",
                    "description": "URL (path) to fetch.",
                    "testValues": {
                        "test1": "https://cdn.jsdelivr.net/npm/xtal-fetch/demo/generated.json"
                    }
                }
            ],
            "properties": [
                {
                    "name": "fetch",
                    "description": "Boolean property / attribute -- must be true to enable (or pre-validate) fetch requests.",
                    "type": "boolean",
                    "testValues": {
                        "test1": true
                    }
                },
                {
                    "name": "href",
                    "description": "URL (path) to fetch.",
                    "type": "string",
                    "testValues": {
                        "test1": "https://cdn.jsdelivr.net/npm/xtal-fetch/demo/generated.json"
                    }
                }
            ],
            "customEvents": [
                {
                    "name": "result-changed",
                    "description": "Result of fetch changed",
                    "associatedPropName": "result",
                    "detail": [
                        {
                            "name": "value",
                            "description": "Result of fetch",
                            "type": "any"
                        }
                    ],
                    "testExpectedValues": {
                        "test1": {
                            "value": [
                                {
                                    "_id": "580d3fbba86e6de6accf5cd1",
                                    "index": 0,
                                    "guid": "23bc285a-1c9e-4975-9c85-f3203721444e",
                                    "isActive": false,
                                    "balance": "$3,317.88",
                                    "picture": "http://placehold.it/32x32",
                                    "age": 37,
                                    "eyeColor": "brown",
                                    "name": "Cooper Patel",
                                    "gender": "male",
                                    "company": "UNISURE",
                                    "email": "cooperpatel@unisure.com",
                                    "phone": "+1 (821) 531-3163",
                                    "address": "962 Varick Avenue, Bentley, Delaware, 1319",
                                    "about": "Aliqua reprehenderit sit reprehenderit cillum anim duis reprehenderit ea deserunt veniam aliquip pariatur aute. Anim sint ea sunt ut sunt sint incididunt dolor. Ipsum ex dolor consequat aute. Eiusmod mollit qui nulla labore Lorem aute occaecat cillum irure fugiat. Nisi proident anim quis laboris veniam aute deserunt eu ipsum culpa eiusmod duis et pariatur.\r\n",
                                    "registered": "2015-06-20T05:36:12 +04:00",
                                    "latitude": -53.862758,
                                    "longitude": -135.928028,
                                    "tags": [
                                        "et",
                                        "deserunt",
                                        "proident",
                                        "proident",
                                        "qui",
                                        "magna",
                                        "voluptate"
                                    ],
                                    "friends": [
                                        {
                                            "id": 0,
                                            "name": "Stuart Massey"
                                        },
                                        {
                                            "id": 1,
                                            "name": "Spencer Garrett"
                                        },
                                        {
                                            "id": 2,
                                            "name": "Petty Houston"
                                        }
                                    ],
                                    "greeting": "Hello, Cooper Patel! You have 1 unread messages.",
                                    "favoriteFruit": "strawberry"
                                },
                                {
                                    "_id": "580d3fbb28cb6eedfb381e86",
                                    "index": 1,
                                    "guid": "ce10cf67-7499-466d-bffc-6e793e280f0a",
                                    "isActive": false,
                                    "balance": "$3,285.45",
                                    "picture": "http://placehold.it/32x32",
                                    "age": 40,
                                    "eyeColor": "green",
                                    "name": "Randolph Cameron",
                                    "gender": "male",
                                    "company": "AQUACINE",
                                    "email": "randolphcameron@aquacine.com",
                                    "phone": "+1 (980) 496-3651",
                                    "address": "143 Jackson Court, Delshire, Vermont, 1273",
                                    "about": "Cillum do laboris laborum aliquip labore nisi. Do dolore irure voluptate reprehenderit consequat. Laborum cupidatat cillum dolore officia elit.\r\n",
                                    "registered": "2014-04-02T10:49:07 +04:00",
                                    "latitude": 42.521681,
                                    "longitude": -152.496821,
                                    "tags": [
                                        "sint",
                                        "fugiat",
                                        "amet",
                                        "dolore",
                                        "non",
                                        "nostrud",
                                        "labore"
                                    ],
                                    "friends": [
                                        {
                                            "id": 0,
                                            "name": "Leigh Rojas"
                                        },
                                        {
                                            "id": 1,
                                            "name": "Hale Scott"
                                        },
                                        {
                                            "id": 2,
                                            "name": "Head Jones"
                                        }
                                    ],
                                    "greeting": "Hello, Randolph Cameron! You have 7 unread messages.",
                                    "favoriteFruit": "banana"
                                },
                                {
                                    "_id": "580d3fbb3e4f98e9c1ed509b",
                                    "index": 2,
                                    "guid": "c973f141-319c-441f-8cb7-b7a08114b3cc",
                                    "isActive": true,
                                    "balance": "$3,205.61",
                                    "picture": "http://placehold.it/32x32",
                                    "age": 40,
                                    "eyeColor": "green",
                                    "name": "Vivian Jacobson",
                                    "gender": "female",
                                    "company": "PARLEYNET",
                                    "email": "vivianjacobson@parleynet.com",
                                    "phone": "+1 (903) 441-2185",
                                    "address": "556 Albemarle Terrace, Stagecoach, Idaho, 4267",
                                    "about": "Ex anim pariatur eu mollit voluptate. Ad qui magna amet ullamco officia fugiat dolore elit cupidatat. Aute cupidatat nostrud consectetur est aute incididunt duis aliquip. Ex laboris incididunt nulla est culpa reprehenderit dolor tempor.\r\n",
                                    "registered": "2015-02-22T10:51:13 +05:00",
                                    "latitude": 28.14754,
                                    "longitude": -84.275715,
                                    "tags": [
                                        "nostrud",
                                        "in",
                                        "laborum",
                                        "ut",
                                        "reprehenderit",
                                        "deserunt",
                                        "pariatur"
                                    ],
                                    "friends": [
                                        {
                                            "id": 0,
                                            "name": "Whitney Herman"
                                        },
                                        {
                                            "id": 1,
                                            "name": "Schultz Cooper"
                                        },
                                        {
                                            "id": 2,
                                            "name": "Delaney Nicholson"
                                        }
                                    ],
                                    "greeting": "Hello, Vivian Jacobson! You have 6 unread messages.",
                                    "favoriteFruit": "apple"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "xtal-fetch-req",
            "description": "A feature-rich web component wrapper around the fetch api.",
            "selfResolvingModulePath": "https://unpkg.com/xtal-fetch@0.0.70/xtal-fetch-req.js?module",
            "attributes": [
                {
                    "name": "fetch",
                    "description": "Boolean property / attribute -- must be true to enable (or pre-validate) fetch requests."
                },
                {
                    "name": "href",
                    "description": "URL (path) to fetch."
                },
                {
                    "name": "req-init",
                    "description": "Object to use for second parameter of fetch method.  Can parse the value from the attribute if the attribute is in JSON format."
                },
                {
                    "name": "cache-results",
                    "description": "Boolean attribute / property -- indicate whether to pull the response from a previous identical fetch request from cache."
                },
                {
                    "name": "insert-results",
                    "description": "Boolean attribute / property -- indicate whether to set the innerHTML of the web component with the response from the server.  Make sure the service is protected against XSS."
                },
                {
                    "name": "req-init-required",
                    "description": "Boolean attribute / property -- indicates that no fetch request should proceed until reqInit property / attribute is set."
                },
                {
                    "name": "base-link-id",
                    "description": "Specify the id of a link element in document.head which contains a root (base) url, to which the href property/attribute should be appended."
                }
            ],
            "properties": [
                {
                    "name": "fetch",
                    "description": "Boolean property / attribute -- must be true to enable (or pre-validate) fetch requests.",
                    "type": "boolean",
                    "testValues": {
                        "test1": true
                    }
                },
                {
                    "name": "href",
                    "description": "URL (path) to fetch.",
                    "type": "string",
                    "testValues": {
                        "test1": "https://cdn.jsdelivr.net/npm/xtal-fetch/demo/generated.json"
                    }
                },
                {
                    "name": "reqInit",
                    "description": "Object to use for second parameter of fetch method.  Can parse the value from the attribute if the attribute is in JSON format.",
                    "type": "object"
                },
                {
                    "name": "cacheResults",
                    "description": "Boolean attribute / property -- indicate whether to pull the response from a previous identical fetch request from cache.",
                    "type": "boolean"
                },
                {
                    "name": "insertResults",
                    "description": "Boolean attribute / property -- indicate whether to set the innerHTML of the web component with the response from the server.  Make sure the service is protected against XSS.",
                    "type": "boolean"
                },
                {
                    "name": "reqInitRequired",
                    "description": "Boolean attribute / property -- indicates that no fetch request should proceed until reqInit property / attribute is set.",
                    "type": "boolean"
                },
                {
                    "name": "baseLinkId",
                    "description": "Specify the id of a link element in document.head which contains a root (base) url, to which the href property/attribute should be appended.",
                    "type": "string"
                }
            ],
            "customEvents": [
                {
                    "name": "result-changed",
                    "description": "Result of fetch changed",
                    "associatedPropName": "result",
                    "detail": [
                        {
                            "name": "value",
                            "description": "Result of fetch",
                            "type": "any"
                        }
                    ]
                },
                {
                    "name": "fetch-in-progress-changed",
                    "description": "Fired when fetch starts and ends",
                    "associatedPropName": "fetchInProgress",
                    "detail": [
                        {
                            "name": "value",
                            "description": "True if fetch in progress, false if not.",
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "name": "error-text-changed",
                    "description": "Fired when fetch error received or cleared.",
                    "associatedPropName": "errorText",
                    "detail": [
                        {
                            "name": "value",
                            "description": "Value of error text (if any).",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "fetch-complete",
                    "description": "Fired when fetch is completed",
                    "detail": [
                        {
                            "name": "href",
                            "description": "URL that was fetched",
                            "type": "string"
                        },
                        {
                            "name": "result",
                            "description": "Result of fetch",
                            "type": "any"
                        }
                    ]
                }
            ]
        },
        {
            "name": "xtal-fetch-entities",
            "description": "A robust web component wrapper around the fetch api.",
            "selfResolvingModulePath": "https://unpkg.com/xtal-fetch@0.0.70/xtal-fetch-entities.js?module",
            "attributes": [
                {
                    "name": "fetch",
                    "description": "Boolean property / attribute -- must be true to enable (or pre-validate) fetch requests."
                },
                {
                    "name": "href",
                    "description": "URL (path) to fetch."
                },
                {
                    "name": "req-init",
                    "description": "Object to use for second parameter of fetch method.  Can parse the value from the attribute if the attribute is in JSON format."
                },
                {
                    "name": "cache-results",
                    "description": "Boolean attribute / property -- indicate whether to pull the response from a previous identical fetch request from cache."
                },
                {
                    "name": "insert-results",
                    "description": "Boolean attribute / property -- indicate whether to set the innerHTML of the web component with the response from the server.  Make sure the service is protected against XSS."
                },
                {
                    "name": "req-init-required",
                    "description": "Boolean attribute / property -- indicates that no fetch request should proceed until reqInit property / attribute is set."
                },
                {
                    "name": "for-each",
                    "description": "Comma delimited list of properties to use as input for the fetch urls."
                },
                {
                    "name": "set-path",
                    "description": "Path to set value inside each entity."
                },
                {
                    "name": "base-link-id",
                    "description": "Specify the id of a link element in document.head which contains a root (base) url, to which the href property/attribute should be appended."
                }
            ],
            "properties": [
                {
                    "name": "fetch",
                    "description": "Boolean property / attribute -- must be true to enable (or pre-validate) fetch requests.",
                    "type": "boolean",
                    "testValues": {
                        "test1": true
                    }
                },
                {
                    "name": "href",
                    "description": "URL (path) to fetch.",
                    "type": "string",
                    "testValues": {
                        "test1": "https://cdn.jsdelivr.net/npm/xtal-fetch/demo/generated.json"
                    }
                },
                {
                    "name": "reqInit",
                    "description": "Object to use for second parameter of fetch method.  Can parse the value from the attribute if the attribute is in JSON format.",
                    "type": "object"
                },
                {
                    "name": "cacheResults",
                    "description": "Boolean attribute / property -- indicate whether to pull the response from a previous identical fetch request from cache.",
                    "type": "boolean"
                },
                {
                    "name": "insertResults",
                    "description": "Boolean attribute / property -- indicate whether to set the innerHTML of the web component with the response from the server.  Make sure the service is protected against XSS.",
                    "type": "boolean"
                },
                {
                    "name": "reqInitRequired",
                    "description": "Boolean attribute / property -- indicates that no fetch request should proceed until reqInit property / attribute is set.",
                    "type": "boolean"
                },
                {
                    "name": "baseLinkId",
                    "description": "Specify the id of a link element in document.head which contains a root (base) url, to which the href property/attribute should be appended.",
                    "type": "string"
                },
                {
                    "name": "inEntities",
                    "description": "Array of entities to use as input for building the url (along with forEach value).  Also place where result should go (using setPath attribute)",
                    "type": "object"
                },
                {
                    "name": "setPath",
                    "description": "Path to set value inside each entity",
                    "type": "string"
                },
                {
                    "name": "forEach",
                    "description": "Comma delimited list of properties to use as input for the fetch urls",
                    "type": "string"
                }
            ],
            "customEvents": [
                {
                    "name": "result-changed",
                    "description": "Result of fetch changed",
                    "associatedPropName": "result",
                    "detail": [
                        {
                            "name": "value",
                            "description": "Result of fetch",
                            "type": "any"
                        }
                    ]
                },
                {
                    "name": "fetch-in-progress-changed",
                    "description": "Fired when fetch starts and ends",
                    "associatedPropName": "fetchInProgress",
                    "detail": [
                        {
                            "name": "value",
                            "description": "True if fetch in progress, false if not.",
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "name": "error-text-changed",
                    "description": "Fired when fetch error received or cleared.",
                    "associatedPropName": "errorText",
                    "detail": [
                        {
                            "name": "value",
                            "description": "Value of error text (if any).",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "fetch-complete",
                    "description": "Fired when fetch is completed",
                    "detail": [
                        {
                            "name": "href",
                            "description": "URL that was fetched",
                            "type": "string"
                        },
                        {
                            "name": "result",
                            "description": "Result of fetch",
                            "type": "any"
                        }
                    ]
                }
            ]
        },
        {
            "name": "xtal-fetch",
            "description": "A robust web component wrapper around the fetch api.",
            "attributes": [
                {
                    "name": "fetch",
                    "description": "Boolean property / attribute -- must be true to enable (or pre-validate) fetch requests.",
                },
                {
                    "name": "href",
                    "description": "URL (path) to fetch."
                },
                {
                    "name": "req-init",
                    "description": "Object to use for second parameter of fetch method.  Can parse the value from the attribute if the attribute is in JSON format."
                },
                {
                    "name": "cache-results",
                    "description": "Boolean attribute / property -- indicate whether to pull the response from a previous identical fetch request from cache."
                },
                {
                    "name": "insert-results",
                    "description": "Boolean attribute / property -- indicate whether to set the innerHTML of the web component with the response from the server.  Make sure the service is protected against XSS."
                },
                {
                    "name": "req-init-required",
                    "description": "Boolean attribute / property -- indicates that no fetch request should proceed until reqInit property / attribute is set."
                },
                {
                    "name": "for-each",
                    "description": "Comma delimited list of properties to use as input for the fetch urls."
                },
                {
                    "name": "set-path",
                    "description": "Path to set value inside each entity."
                },
                {
                    "name": "base-link-id",
                    "description": "Specify the id of a link element in document.head which contains a root (base) url, to which the href property/attribute should be appended."
                }
            ],
            "properties": [
                {
                    "name": "fetch",
                    "description": "Boolean property / attribute -- must be true to enable (or pre-validate) fetch requests.",
                    "type": "boolean",
                    "testValues": {
                        "test1": true
                    }
                },
                {
                    "name": "href",
                    "description": "URL (path) to fetch.",
                    "type": "string",
                    "testValues": {
                        "test1": "https://cdn.jsdelivr.net/npm/xtal-fetch/demo/generated.json"
                    }
                },
                {
                    "name": "reqInit",
                    "type": "object",
                    "description": "Object to use for second parameter of fetch method.  Can parse the value from the attribute if the attribute is in JSON format."
                },
                {
                    "name": "cacheResults",
                    "type": "boolean",
                    "description": "Boolean attribute / property -- indicate whether to pull the response from a previous identical fetch request from cache."
                },
                {
                    "name": "insertResults",
                    "type": "boolean",
                    "description": "Boolean attribute / property -- indicate whether to set the innerHTML of the web component with the response from the server.  Make sure the service is protected against XSS."
                },
                {
                    "name": "reqInitRequired",
                    "type": "boolean",
                    "description": "Boolean attribute / property -- indicates that no fetch request should proceed until reqInit property / attribute is set."
                },
                {
                    "name": "baseLinkId",
                    "type": "string",
                    "description": "Specify the id of a link element in document.head which contains a root (base) url, to which the href property/attribute should be appended."
                },
                {
                    "name": "inEntities",
                    "type": "object",
                    "description": "Array of entities to use as input for building the url (along with forEach value).  Also place where result should go (using setPath attribute)"
                },
                {
                    "name": "setPath",
                    "type": "string",
                    "description": "Path to set value inside each entity"
                },
                {
                    "name": "forEach",
                    "type": "string",
                    "description": "Comma delimited list of properties to use as input for the fetch urls"
                }
            ],
            "customEvents": [
                {
                    "name": "result-changed",
                    "description": "Result of fetch changed",
                    "associatedPropName": "result",
                    "detail": [
                        {
                            "name": "value",
                            "description": "Result of fetch",
                            "type": "any"
                        }
                    ]
                },
                {
                    "name": "fetch-in-progress-changed",
                    "description": "Fired when fetch starts and ends",
                    "associatedPropName": "fetchInProgress",
                    "detail": [
                        {
                            "name": "value",
                            "description": "True if fetch in progress, false if not.",
                            "type": "boolean"
                        }
                    ]
                },
                {
                    "name": "error-text-changed",
                    "description": "Fired when fetch error received or cleared.",
                    "associatedPropName": "errorText",
                    "detail": [
                        {
                            "name": "value",
                            "description": "Value of error text (if any).",
                            "type": "string"
                        }
                    ]
                },
                {
                    "name": "fetch-complete",
                    "description": "Fired when fetch is completed",
                    "detail": [
                        {
                            "name": "href",
                            "description": "URL that was fetched",
                            "type": "string"
                        },
                        {
                            "name": "result",
                            "description": "Result of fetch",
                            "type": "any"
                        }
                    ]
                }
            ]
        }
    ]
}