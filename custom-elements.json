{
  "version": 2,
  "tags": [
    {
      "name": "xtal-fetch-entities",
      "description": "Entire feature set for xtal-fetch, including multiple entity requests.",
      "jsDoc": "/**\n *  Entire feature set for xtal-fetch, including multiple entity requests.\n *  @element xtal-fetch-entities\n */",
      "attributes": [
        {
          "name": "as",
          "description": "How to treat the response",
          "jsDoc": "/**\r\n     * How to treat the response\r\n     * @attr\r\n     * @type {\"json\"|\"text\"}\r\n     */",
          "type": "\"text\" | \"json\""
        },
        {
          "name": "href",
          "description": "URL (path) to fetch.",
          "jsDoc": "/**\r\n     * URL (path) to fetch.\r\n     * @type {String}\r\n     * @attr\r\n     * \r\n     */",
          "type": "string"
        },
        {
          "name": "req-init",
          "description": "Object to use for second parameter of fetch method.  Can parse the value from the attribute if the attribute is in JSON format.\r\nSupports JSON formatted attribute",
          "jsDoc": "/**\r\n     * Object to use for second parameter of fetch method.  Can parse the value from the attribute if the attribute is in JSON format.\r\n     * Supports JSON formatted attribute\r\n     * @type {object}\r\n     * @attr req-init\r\n     */",
          "type": "RequestInit | undefined"
        },
        {
          "name": "cache-results",
          "description": "Indicates whether to pull the response from a previous identical fetch request from cache.",
          "jsDoc": "/**\r\n     * Indicates whether to pull the response from a previous identical fetch request from cache.\r\n     * @attr cache-results\r\n     */",
          "type": "boolean"
        },
        {
          "name": "debounce-duration",
          "description": "How long to pause between requests",
          "jsDoc": "/**\r\n     * How long to pause between requests\r\n     * @attr debounce-duration\r\n     * @type {Number}\r\n     * \r\n     */",
          "type": "number"
        },
        {
          "name": "insert-results",
          "description": "Indicate whether to set the innerHTML of the web component with the response from the server.  \r\nMake sure the service is protected against XSS.",
          "jsDoc": "/**\r\n     * Indicate whether to set the innerHTML of the web component with the response from the server.  \r\n     * Make sure the service is protected against XSS.\r\n     * @attr insert-results\r\n     */",
          "type": "boolean"
        },
        {
          "name": "for-each",
          "description": "Comma delimited list of properties to use as input for the fetch urls",
          "jsDoc": "/**\n     * Comma delimited list of properties to use as input for the fetch urls\n     * @type {String}\n     * @attr for-each\n     */",
          "type": "any"
        }
      ],
      "properties": [
        {
          "name": "val",
          "type": "\"set\" | \"remove\""
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "evCount",
          "type": "{ [key: string]: number; }"
        },
        {
          "name": "asIs",
          "type": "\"\" | \"-changed\""
        },
        {
          "name": "fetch",
          "type": "boolean"
        },
        {
          "name": "as",
          "description": "How to treat the response",
          "jsDoc": "/**\r\n     * How to treat the response\r\n     * @attr\r\n     * @type {\"json\"|\"text\"}\r\n     */",
          "type": "\"text\" | \"json\""
        },
        {
          "name": "href",
          "description": "URL (path) to fetch.",
          "jsDoc": "/**\r\n     * URL (path) to fetch.\r\n     * @type {String}\r\n     * @attr\r\n     * \r\n     */",
          "type": "string"
        },
        {
          "name": "value",
          "type": "any"
        },
        {
          "name": "result",
          "description": "⚡ Fires event result-changed\r\nResult of fetch request",
          "jsDoc": "/**\r\n     * ⚡ Fires event result-changed\r\n     * Result of fetch request\r\n     * @type {Object}\r\n     * \r\n     * \r\n     */",
          "type": "any"
        },
        {
          "name": "baseLinkId",
          "type": "string"
        },
        {
          "name": "reqInit",
          "description": "Object to use for second parameter of fetch method.  Can parse the value from the attribute if the attribute is in JSON format.\r\nSupports JSON formatted attribute",
          "jsDoc": "/**\r\n     * Object to use for second parameter of fetch method.  Can parse the value from the attribute if the attribute is in JSON format.\r\n     * Supports JSON formatted attribute\r\n     * @type {object}\r\n     * @attr req-init\r\n     */",
          "type": "RequestInit | undefined"
        },
        {
          "name": "cacheResults",
          "description": "Indicates whether to pull the response from a previous identical fetch request from cache.",
          "jsDoc": "/**\r\n     * Indicates whether to pull the response from a previous identical fetch request from cache.\r\n     * @attr cache-results\r\n     */",
          "type": "boolean"
        },
        {
          "name": "reqInitRequired",
          "description": "Indicates that no fetch request should proceed until reqInit property / attribute is set.",
          "jsDoc": "/**\r\n     * Indicates that no fetch request should proceed until reqInit property / attribute is set.\r\n     */",
          "type": "boolean"
        },
        {
          "name": "debounceDuration",
          "description": "How long to pause between requests",
          "jsDoc": "/**\r\n     * How long to pause between requests\r\n     * @attr debounce-duration\r\n     * @type {Number}\r\n     * \r\n     */",
          "type": "number"
        },
        {
          "name": "errorResponse",
          "description": "Error response as an object\r\n⚡ Fires event error-response-changed",
          "jsDoc": "/**\r\n     * Error response as an object\r\n     * ⚡ Fires event error-response-changed\r\n     * @type {Object}\r\n     * \r\n     */",
          "type": "Response | null"
        },
        {
          "name": "errorText",
          "description": "Indicates the error text of the last request.\r\n⚡ Fires event error-text-changed.",
          "jsDoc": "/**\r\n     * Indicates the error text of the last request.\r\n     * ⚡ Fires event error-text-changed.\r\n     * @type {String}\r\n     */",
          "type": "string"
        },
        {
          "name": "fetchInProgress",
          "description": "Indicates Fetch is in progress\r\n⚡ Fires event fetch-in-progress-changed",
          "jsDoc": "/**\r\n     * Indicates Fetch is in progress\r\n     * ⚡ Fires event fetch-in-progress-changed\r\n     * @type {Boolean}\r\n     */",
          "type": "boolean"
        },
        {
          "name": "insertResults",
          "description": "Indicate whether to set the innerHTML of the web component with the response from the server.  \r\nMake sure the service is protected against XSS.",
          "jsDoc": "/**\r\n     * Indicate whether to set the innerHTML of the web component with the response from the server.  \r\n     * Make sure the service is protected against XSS.\r\n     * @attr insert-results\r\n     */",
          "type": "boolean"
        },
        {
          "name": "abort",
          "type": "boolean"
        },
        {
          "name": "forEach",
          "description": "Comma delimited list of properties to use as input for the fetch urls",
          "jsDoc": "/**\n     * Comma delimited list of properties to use as input for the fetch urls\n     * @type {String}\n     * @attr for-each\n     */",
          "type": "any"
        },
        {
          "name": "setPath",
          "description": "Path to set value inside each entity",
          "jsDoc": "/**\n     * Path to set value inside each entity\n     * @type {String}\n     * attr set-path\n     */",
          "type": "any"
        },
        {
          "name": "inEntities",
          "description": "Array of entities to use as input for building the url (along with forEach value).  Also place where result should go (using setPath attribute)",
          "jsDoc": "/**\n     * Array of entities to use as input for building the url (along with forEach value).  Also place where result should go (using setPath attribute)\n     * @type {Array}\n     *\n     */",
          "type": "any"
        }
      ],
      "events": [
        {
          "name": "fetch-complete"
        },
        {
          "name": "fetch-in-progress-changed"
        },
        {
          "name": "error-text-changed"
        },
        {
          "name": "error-response-changed"
        },
        {
          "name": "result-changed"
        }
      ],
      "slots": []
    },
    {
      "name": "xtal-fetch",
      "description": "Feature rich custom element that can make fetch calls, include Post requests.",
      "jsDoc": "/**\n * Feature rich custom element that can make fetch calls, include Post requests.\n *  @element xtal-fetch\n */",
      "attributes": [
        {
          "name": "as",
          "description": "How to treat the response",
          "jsDoc": "/**\r\n     * How to treat the response\r\n     * @attr\r\n     * @type {\"json\"|\"text\"}\r\n     */",
          "type": "\"text\" | \"json\""
        },
        {
          "name": "href",
          "description": "URL (path) to fetch.",
          "jsDoc": "/**\r\n     * URL (path) to fetch.\r\n     * @type {String}\r\n     * @attr\r\n     * \r\n     */",
          "type": "string"
        },
        {
          "name": "req-init",
          "description": "Object to use for second parameter of fetch method.  Can parse the value from the attribute if the attribute is in JSON format.\r\nSupports JSON formatted attribute",
          "jsDoc": "/**\r\n     * Object to use for second parameter of fetch method.  Can parse the value from the attribute if the attribute is in JSON format.\r\n     * Supports JSON formatted attribute\r\n     * @type {object}\r\n     * @attr req-init\r\n     */",
          "type": "RequestInit | undefined"
        },
        {
          "name": "cache-results",
          "description": "Indicates whether to pull the response from a previous identical fetch request from cache.",
          "jsDoc": "/**\r\n     * Indicates whether to pull the response from a previous identical fetch request from cache.\r\n     * @attr cache-results\r\n     */",
          "type": "boolean"
        },
        {
          "name": "debounce-duration",
          "description": "How long to pause between requests",
          "jsDoc": "/**\r\n     * How long to pause between requests\r\n     * @attr debounce-duration\r\n     * @type {Number}\r\n     * \r\n     */",
          "type": "number"
        },
        {
          "name": "insert-results",
          "description": "Indicate whether to set the innerHTML of the web component with the response from the server.  \r\nMake sure the service is protected against XSS.",
          "jsDoc": "/**\r\n     * Indicate whether to set the innerHTML of the web component with the response from the server.  \r\n     * Make sure the service is protected against XSS.\r\n     * @attr insert-results\r\n     */",
          "type": "boolean"
        },
        {
          "name": "for-each",
          "description": "Comma delimited list of properties to use as input for the fetch urls",
          "jsDoc": "/**\n     * Comma delimited list of properties to use as input for the fetch urls\n     * @type {String}\n     * @attr for-each\n     */",
          "type": "any"
        }
      ],
      "properties": [
        {
          "name": "val",
          "type": "\"set\" | \"remove\""
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "evCount",
          "type": "{ [key: string]: number; }"
        },
        {
          "name": "asIs",
          "type": "\"\" | \"-changed\""
        },
        {
          "name": "fetch",
          "type": "boolean"
        },
        {
          "name": "as",
          "description": "How to treat the response",
          "jsDoc": "/**\r\n     * How to treat the response\r\n     * @attr\r\n     * @type {\"json\"|\"text\"}\r\n     */",
          "type": "\"text\" | \"json\""
        },
        {
          "name": "href",
          "description": "URL (path) to fetch.",
          "jsDoc": "/**\r\n     * URL (path) to fetch.\r\n     * @type {String}\r\n     * @attr\r\n     * \r\n     */",
          "type": "string"
        },
        {
          "name": "value",
          "type": "any"
        },
        {
          "name": "result",
          "description": "⚡ Fires event result-changed\r\nResult of fetch request",
          "jsDoc": "/**\r\n     * ⚡ Fires event result-changed\r\n     * Result of fetch request\r\n     * @type {Object}\r\n     * \r\n     * \r\n     */",
          "type": "any"
        },
        {
          "name": "baseLinkId",
          "type": "string"
        },
        {
          "name": "reqInit",
          "description": "Object to use for second parameter of fetch method.  Can parse the value from the attribute if the attribute is in JSON format.\r\nSupports JSON formatted attribute",
          "jsDoc": "/**\r\n     * Object to use for second parameter of fetch method.  Can parse the value from the attribute if the attribute is in JSON format.\r\n     * Supports JSON formatted attribute\r\n     * @type {object}\r\n     * @attr req-init\r\n     */",
          "type": "RequestInit | undefined"
        },
        {
          "name": "cacheResults",
          "description": "Indicates whether to pull the response from a previous identical fetch request from cache.",
          "jsDoc": "/**\r\n     * Indicates whether to pull the response from a previous identical fetch request from cache.\r\n     * @attr cache-results\r\n     */",
          "type": "boolean"
        },
        {
          "name": "reqInitRequired",
          "description": "Indicates that no fetch request should proceed until reqInit property / attribute is set.",
          "jsDoc": "/**\r\n     * Indicates that no fetch request should proceed until reqInit property / attribute is set.\r\n     */",
          "type": "boolean"
        },
        {
          "name": "debounceDuration",
          "description": "How long to pause between requests",
          "jsDoc": "/**\r\n     * How long to pause between requests\r\n     * @attr debounce-duration\r\n     * @type {Number}\r\n     * \r\n     */",
          "type": "number"
        },
        {
          "name": "errorResponse",
          "description": "Error response as an object\r\n⚡ Fires event error-response-changed",
          "jsDoc": "/**\r\n     * Error response as an object\r\n     * ⚡ Fires event error-response-changed\r\n     * @type {Object}\r\n     * \r\n     */",
          "type": "Response | null"
        },
        {
          "name": "errorText",
          "description": "Indicates the error text of the last request.\r\n⚡ Fires event error-text-changed.",
          "jsDoc": "/**\r\n     * Indicates the error text of the last request.\r\n     * ⚡ Fires event error-text-changed.\r\n     * @type {String}\r\n     */",
          "type": "string"
        },
        {
          "name": "fetchInProgress",
          "description": "Indicates Fetch is in progress\r\n⚡ Fires event fetch-in-progress-changed",
          "jsDoc": "/**\r\n     * Indicates Fetch is in progress\r\n     * ⚡ Fires event fetch-in-progress-changed\r\n     * @type {Boolean}\r\n     */",
          "type": "boolean"
        },
        {
          "name": "insertResults",
          "description": "Indicate whether to set the innerHTML of the web component with the response from the server.  \r\nMake sure the service is protected against XSS.",
          "jsDoc": "/**\r\n     * Indicate whether to set the innerHTML of the web component with the response from the server.  \r\n     * Make sure the service is protected against XSS.\r\n     * @attr insert-results\r\n     */",
          "type": "boolean"
        },
        {
          "name": "abort",
          "type": "boolean"
        },
        {
          "name": "forEach",
          "description": "Comma delimited list of properties to use as input for the fetch urls",
          "jsDoc": "/**\n     * Comma delimited list of properties to use as input for the fetch urls\n     * @type {String}\n     * @attr for-each\n     */",
          "type": "any"
        },
        {
          "name": "setPath",
          "description": "Path to set value inside each entity",
          "jsDoc": "/**\n     * Path to set value inside each entity\n     * @type {String}\n     * attr set-path\n     */",
          "type": "any"
        },
        {
          "name": "inEntities",
          "description": "Array of entities to use as input for building the url (along with forEach value).  Also place where result should go (using setPath attribute)",
          "jsDoc": "/**\n     * Array of entities to use as input for building the url (along with forEach value).  Also place where result should go (using setPath attribute)\n     * @type {Array}\n     *\n     */",
          "type": "any"
        }
      ],
      "events": [
        {
          "name": "fetch-complete"
        },
        {
          "name": "fetch-in-progress-changed"
        },
        {
          "name": "error-text-changed"
        },
        {
          "name": "error-response-changed"
        },
        {
          "name": "result-changed"
        }
      ],
      "slots": []
    },
    {
      "name": "xtal-fetch-get",
      "description": "Barebones custom element that can make fetch calls.",
      "jsDoc": "/**\n *  Barebones custom element that can make fetch calls.\n * @element xtal-fetch-get\n * @event result-changed\n */",
      "attributes": [
        {
          "name": "as",
          "description": "How to treat the response",
          "jsDoc": "/**\n     * How to treat the response\n     * @attr\n     * @type {\"json\"|\"text\"}\n     */",
          "type": "string"
        },
        {
          "name": "href",
          "description": "URL (path) to fetch.",
          "jsDoc": "/**\n     * URL (path) to fetch.\n     * @type {String}\n     * @attr\n     *\n     */",
          "type": "any"
        }
      ],
      "properties": [
        {
          "name": "val",
          "type": "\"set\" | \"remove\""
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "evCount",
          "type": "{ [key: string]: number; }"
        },
        {
          "name": "asIs",
          "type": "\"\" | \"-changed\""
        },
        {
          "name": "fetch",
          "type": "boolean | undefined"
        },
        {
          "name": "as",
          "description": "How to treat the response",
          "jsDoc": "/**\n     * How to treat the response\n     * @attr\n     * @type {\"json\"|\"text\"}\n     */",
          "type": "string"
        },
        {
          "name": "href",
          "description": "URL (path) to fetch.",
          "jsDoc": "/**\n     * URL (path) to fetch.\n     * @type {String}\n     * @attr\n     *\n     */",
          "type": "any"
        },
        {
          "name": "result",
          "description": "⚡ Fires event result-changed\nResult of fetch request",
          "jsDoc": "/**\n     * ⚡ Fires event result-changed\n     * Result of fetch request\n     * @type {Object}\n     *\n     *\n     */",
          "type": "any"
        }
      ],
      "events": [
        {
          "name": "result-changed"
        }
      ],
      "slots": []
    },
    {
      "name": "xtal-fetch-req",
      "description": "Feature rich custom element that can make fetch calls, including post requests.",
      "jsDoc": "/**\n * Feature rich custom element that can make fetch calls, including post requests.\n * @element xtal-fetch-req\n * @event error-response-changed\n * @event error-text-changed\n * @event fetch-in-progress-changed\n * @event fetch-complete\n */",
      "attributes": [
        {
          "name": "as",
          "description": "How to treat the response",
          "jsDoc": "/**\r\n     * How to treat the response\r\n     * @attr\r\n     * @type {\"json\"|\"text\"}\r\n     */",
          "type": "\"text\" | \"json\""
        },
        {
          "name": "href",
          "description": "URL (path) to fetch.",
          "jsDoc": "/**\r\n     * URL (path) to fetch.\r\n     * @type {String}\r\n     * @attr\r\n     * \r\n     */",
          "type": "string"
        },
        {
          "name": "req-init",
          "description": "Object to use for second parameter of fetch method.  Can parse the value from the attribute if the attribute is in JSON format.\nSupports JSON formatted attribute",
          "jsDoc": "/**\n     * Object to use for second parameter of fetch method.  Can parse the value from the attribute if the attribute is in JSON format.\n     * Supports JSON formatted attribute\n     * @type {object}\n     * @attr req-init\n     */",
          "type": "any"
        },
        {
          "name": "cache-results",
          "description": "Indicates whether to pull the response from a previous identical fetch request from cache.",
          "jsDoc": "/**\n     * Indicates whether to pull the response from a previous identical fetch request from cache.\n     * @attr cache-results\n     */",
          "type": "boolean"
        },
        {
          "name": "debounce-duration",
          "description": "How long to pause between requests",
          "jsDoc": "/**\n     * How long to pause between requests\n     * @attr debounce-duration\n     * @type {Number}\n     *\n     */",
          "type": "number | undefined"
        },
        {
          "name": "insert-results",
          "description": "Indicate whether to set the innerHTML of the web component with the response from the server.\nMake sure the service is protected against XSS.",
          "jsDoc": "/**\n     * Indicate whether to set the innerHTML of the web component with the response from the server.\n     * Make sure the service is protected against XSS.\n     * @attr insert-results\n     */",
          "type": "boolean"
        }
      ],
      "properties": [
        {
          "name": "val",
          "type": "\"set\" | \"remove\""
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "evCount",
          "type": "{ [key: string]: number; }"
        },
        {
          "name": "asIs",
          "type": "\"\" | \"-changed\""
        },
        {
          "name": "fetch",
          "type": "boolean"
        },
        {
          "name": "as",
          "description": "How to treat the response",
          "jsDoc": "/**\r\n     * How to treat the response\r\n     * @attr\r\n     * @type {\"json\"|\"text\"}\r\n     */",
          "type": "\"text\" | \"json\""
        },
        {
          "name": "href",
          "description": "URL (path) to fetch.",
          "jsDoc": "/**\r\n     * URL (path) to fetch.\r\n     * @type {String}\r\n     * @attr\r\n     * \r\n     */",
          "type": "string"
        },
        {
          "name": "value",
          "type": "any"
        },
        {
          "name": "result",
          "description": "⚡ Fires event result-changed\r\nResult of fetch request",
          "jsDoc": "/**\r\n     * ⚡ Fires event result-changed\r\n     * Result of fetch request\r\n     * @type {Object}\r\n     * \r\n     * \r\n     */",
          "type": "any"
        },
        {
          "name": "baseLinkId",
          "type": "string"
        },
        {
          "name": "reqInit",
          "description": "Object to use for second parameter of fetch method.  Can parse the value from the attribute if the attribute is in JSON format.\nSupports JSON formatted attribute",
          "jsDoc": "/**\n     * Object to use for second parameter of fetch method.  Can parse the value from the attribute if the attribute is in JSON format.\n     * Supports JSON formatted attribute\n     * @type {object}\n     * @attr req-init\n     */",
          "type": "any"
        },
        {
          "name": "cacheResults",
          "description": "Indicates whether to pull the response from a previous identical fetch request from cache.",
          "jsDoc": "/**\n     * Indicates whether to pull the response from a previous identical fetch request from cache.\n     * @attr cache-results\n     */",
          "type": "boolean"
        },
        {
          "name": "reqInitRequired",
          "description": "Indicates that no fetch request should proceed until reqInit property / attribute is set.",
          "jsDoc": "/**\n     * Indicates that no fetch request should proceed until reqInit property / attribute is set.\n     */",
          "type": "boolean"
        },
        {
          "name": "debounceDuration",
          "description": "How long to pause between requests",
          "jsDoc": "/**\n     * How long to pause between requests\n     * @attr debounce-duration\n     * @type {Number}\n     *\n     */",
          "type": "number | undefined"
        },
        {
          "name": "errorResponse",
          "description": "Error response as an object\n⚡ Fires event error-response-changed",
          "jsDoc": "/**\n     * Error response as an object\n     * ⚡ Fires event error-response-changed\n     * @type {Object}\n     *\n     */",
          "type": "any"
        },
        {
          "name": "errorText",
          "description": "Indicates the error text of the last request.\n⚡ Fires event error-text-changed.",
          "jsDoc": "/**\n     * Indicates the error text of the last request.\n     * ⚡ Fires event error-text-changed.\n     * @type {String}\n     */",
          "type": "any"
        },
        {
          "name": "fetchInProgress",
          "description": "Indicates Fetch is in progress\n⚡ Fires event fetch-in-progress-changed",
          "jsDoc": "/**\n     * Indicates Fetch is in progress\n     * ⚡ Fires event fetch-in-progress-changed\n     * @type {Boolean}\n     */",
          "type": "any"
        },
        {
          "name": "insertResults",
          "description": "Indicate whether to set the innerHTML of the web component with the response from the server.\nMake sure the service is protected against XSS.",
          "jsDoc": "/**\n     * Indicate whether to set the innerHTML of the web component with the response from the server.\n     * Make sure the service is protected against XSS.\n     * @attr insert-results\n     */",
          "type": "boolean"
        },
        {
          "name": "abort",
          "type": "any"
        }
      ],
      "events": [
        {
          "name": "fetch-complete"
        },
        {
          "name": "fetch-in-progress-changed"
        },
        {
          "name": "error-text-changed"
        },
        {
          "name": "error-response-changed"
        },
        {
          "name": "result-changed"
        }
      ],
      "slots": []
    }
  ]
}