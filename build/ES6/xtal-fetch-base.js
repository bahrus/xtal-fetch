const fetch='fetch',href='href',block='block';export class XtalFetchBase extends HTMLElement{constructor(){super(...arguments),this._reqInit={credentials:'include'},this._as='json'}static get is(){return'xtal-fetch-base'}de(a,b){const c=new CustomEvent(a+'-changed',{detail:b,bubbles:!0,composed:!1});return this.dispatchEvent(c),c}get fetch(){return this._fetch}set fetch(a){a?this.setAttribute(fetch,''):this.removeAttribute(fetch)}get block(){return this._block}set block(a){a?this.setAttribute(block,''):this.removeAttribute(block)}get href(){return this._href}set href(a){this.setAttribute(href,a)}get result(){return this._result}set result(a){this._result=a,this.de('result',a)}static get observedAttributes(){return[fetch,href,block]}_upgradeProperties(a){a.forEach((a)=>{if(this.hasOwnProperty(a)){let b=this[a];delete this[a],this[a]=b}})}attributeChangedCallback(a,b,c){this['_'+a]=a===fetch||a===block?null!==c:c;this.onBasePropsChange()}onBasePropsChange(){this.fetch&&this.href&&!this.block&&this.do()}do(){const a=this;self.fetch(this.href,this._reqInit).then((b)=>{b[a._as]().then((b)=>{a.result=b})})}connectedCallback(){this._upgradeProperties([fetch,href,block])}}customElements.get(XtalFetchBase.is)||customElements.define(XtalFetchBase.is,XtalFetchBase);